datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  email         String         @unique
  password      String
  role          String         @default("USER") // "USER" or "ADMIN"
  tier          String         @default("FREE") // "FREE" or "PAID"
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  characters    Character[]
  novels        VisualNovel[]
  conversations Conversation[]
  ratings       Rating[]
}

model Character {
  id                String         @id @default(cuid())
  name              String
  description       String
  personality       String
  scenario          String
  firstMessage      String
  messageExample    String?
  systemPrompt      String?
  creatorNotes      String?
  tags              String         @default("[]") // JSON array stored as string
  avatarUrl         String?
  creator           User           @relation(fields: [creatorId], references: [id])
  creatorId         String
  isPublic          Boolean        @default(false)
  downloadCount     Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  conversations     Conversation[]
  ratings           Rating[]
  novels            VisualNovel[]
}

model VisualNovel {
  id            String         @id @default(cuid())
  title         String
  description   String
  coverUrl      String?
  backgroundUrl String?        // Default background for all scenes
  scenes        String         // Stores the visual novel scene data as JSON string
  tags          String         @default("[]") // JSON array stored as string
  isPublic      Boolean        @default(false)
  playCount     Int            @default(0)
  creator       User           @relation(fields: [creatorId], references: [id])
  creatorId     String
  character     Character?     @relation(fields: [characterId], references: [id])
  characterId   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  conversations Conversation[]
  ratings       Rating[]
}

model Conversation {
  id              String         @id @default(cuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  character       Character?     @relation(fields: [characterId], references: [id])
  characterId     String?
  visualNovel     VisualNovel?   @relation(fields: [visualNovelId], references: [id])
  visualNovelId   String?
  messages        String         @default("[]") // Stores conversation history as JSON string
  lastMessage     String         @default("")  // Quick reference to last message
  currentSceneId  String?        // Current scene in visual novel
  variables       String         @default("{}") // Story variables as JSON string
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Rating {
  id            String         @id @default(cuid())
  rating        Int            // 1-5 stars
  review        String?
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  character     Character?     @relation(fields: [characterId], references: [id])
  characterId   String?
  novel         VisualNovel?   @relation(fields: [novelId], references: [id])
  novelId       String?
  createdAt     DateTime       @default(now())
  
  @@unique([userId, characterId])
  @@unique([userId, novelId])
}